JUJU_HPCC_DIR=/var/lib/HPCCSystems/charm
CONFIG_DIR=/etc/HPCCSystems
ENV_XML_FILE=environment.xml
ENV_CONF_FILE=environment.conf
ENV_GEN="/opt/HPCCSystems/sbin/envgen"
SIGNATURE_FILE=${JUJU_HPCC_DIR}/env_signature
LOCAL_IP_FILE=${JUJU_HPCC_DIR}/local_ip
UNIT_NAME_AND_IP_FILE=${JUJU_HPCC_DIR}/unit_name_and_ip_file
IP_FILE=${JUJU_HPCC_DIR}/ip_file
ECLWATCH_URL_FILE=${JUJU_HPCC_DIR}/eclwatch_url
HPCC_STATE=${JUJU_HPCC_DIR}/juju_state
HPCC_RELATION_ID=${JUJU_HPCC_DIR}/hpcc_relation_id
JUJU_CONFIG_FILE=${JUJU_HPCC_DIR}/juju_config

##
## Fix private key in chance newlines removed
##
function fix_private_key()
{
   head_end_marks=$(echo "${PRI_KEY}" | \
       sed -n "s/\(-----.*-----\).*\(-----.*-----\)/\1,\2/p" )

   if [ -z "$head_end_marks" ] 
   then
       return
   fi

   BEGIN_KEY=$(echo ${head_end_marks} | cut -d',' -f1)
   END_KEY=$(echo ${head_end_marks} | cut -d',' -f2)

   private_key=$(echo "${PRI_KEY}" | \
       sed "s/${BEGIN_KEY}\(.*\)${END_KEY}/\1/g" | sed 's/ /\n/g')

   END_KEY=$(echo "${END_KEY}"  | sed 's/^/\n/g')
   PRI_KEY="${BEGIN_KEY}${private_key}${END_KEY}"

}

##
## Parse environment.conf
##
function parse_env_config()
{
  HPCC_CONFIG=${HPCC_CONFIG:-${CONFIG_DIR}/${ENV_CONF_FILE}}
  SECTION=${1:-DEFAULT}

  PATH_PREFIX=$(cat ${HPCC_CONFIG} | sed -n "/\[${SECTION}\]/,/\[/p" | \
     grep "^home *= *" | sed -e 's/^home *= *//')
  USER_NAME=$(cat ${HPCC_CONFIG} | sed -n "/\[${SECTION}\]/,/\[/p" | \
     grep "^user *= *" | sed -e 's/^user *= *//')

  PATH_HOME=${PATH_PREFIX}/${USER_NAME}
}

##
## Set SSH Keys
##
function set_ssh_keys()
{
  if [ -z "$PUB_KEY" ] || [ -z "$PRI_KEY" ] 
  then 
     return 0
  fi

  parse_env_config
  juju-log "Set SSH Keys. HOME: $PATH_HOME, USER: $USER_NAME."
  if [ ! -d $PATH_HOME/.ssh ]; then
     mkdir $PATH_HOME/.ssh
  fi
  rm -fr $PATH_HOME/.ssh/*


  echo "$PUB_KEY" > $PATH_HOME/.ssh/id_rsa.pub
  echo "$PRI_KEY" > $PATH_HOME/.ssh/id_rsa
  if [ -e $PATH_HOME/.ssh/id_rsa.pub ]; then
     cat $PATH_HOME/.ssh/id_rsa.pub > $PATH_HOME/.ssh/authorized_keys
  fi

  chown -R $USER_NAME:$USER_NAME $PATH_HOME/.ssh
  chmod 644 $PATH_HOME/.ssh/authorized_keys
  chmod 600 $PATH_HOME/.ssh/id_rsa
  chmod 644 $PATH_HOME/.ssh/id_rsa.pub

}

##
## Query/Create and set SSH Keys
##
function create_and_set_ssh_keys()
{
  for UNIT in $(relation-list)
  do
    PUB_KEY=$(relation-get ssh-key-public ${UNIT})
    PRI_KEY=$(relation-get ssh-key-private ${UNIT})
    [ -n "$PUB_KEY" ] && [ -n "$PRI_KEY" ]  && break
  done
  if [ -z "$PUB_KEY" ] || [ -z "$PRI_KEY" ]
  then
    SSH_DIR=/tmp/hpcc_ssh
    [ -d ${SSH_DIR} ] && rm -rf ${SSH_DIR}
    mkdir ${SSH_DIR}
    juju-log "Generate ssh keys with ssh-keygen"
    ssh-keygen -f ${SSH_DIR}/id_isa -t rsa -N ''
    PUB_KEY=$(cat ${SSH_DIR}/id_isa.pub)
    PRI_KEY=$(cat ${SSH_DIR}/id_isa)
    rm -rf ${SSH_DIR}
  fi
  set_ssh_keys
  if [ -n "${JUJU_RELATION_ID}" ]
  then
     juju-log "Set ssh kyes."
     relation-set ssh-key-public="${PUB_KEY}"
     relation-set ssh-key-private="${PRI_KEY}"
  fi
}

##
## check  unit private-address
## After reboot ip is changed but unit-get private-address
## need take some time to reset correct ip.
## This function will check if the "unit-get private-address" 
## gives correct ip or not.
##
function check_private_address()
{
   echo "enter wait reset private address"
   _rc=1
   _PRIVATE_HOSTNAME=$(unit-get private-address)
   _IP_ADDRESS=$(dig +short ${_PRIVATE_HOSTNAME} | tail -n 1)
   juju_relation_id=$(cat ${HPCC_RELATION_ID})
   PRIVATE_HOSTNAME=$(relation-get -r ${juju_relation_id} private-address $JUJU_UNIT_NAME)
   UNIT_ADDRESS=$(dig +short ${PRIVATE_HOSTNAME} | tail -n 1)
   echo "private-address from unit-get: $_IP_ADDRESS"
   echo "private-address from relation-get: $UNIT_ADDRESS"
   echo "ifconfig: $(ifconfig -a | grep -i "inet addr:${_IP_ADDRESS}" || :)"
   _result=$(ifconfig -a | grep -i "inet addr:${_IP_ADDRESS}" || :)
   
   if [ -n "$_result" ] && [ "$UNIT_ADDRESS" = "$_IP_ADDRESS" ]
   then
      echo "set reset-done   result=${_result}"
      relation-set state="reset-done" 
      #private-address="${_PRIVATE_HOSTNAME}"
   else   
      if [ -n "$_result" ] && [ "$UNIT_ADDRESS" != "$_IP_ADDRESS" ]
      then
         relation-set private-address="${_PRIVATE_HOSTNAME}"
      fi
      sleep 1
      relation-set timestamp=$(date +%s)
   fi
   echo "leave wait reset private address: $_IP_ADDRESS"
}

##
## Save local ip to a file
##
function save_local_ip()
{
  HOSTNAME=$(unit-get public-address)
  PRIVATE_HOSTNAME=$(unit-get private-address)
  IP_ADDRESS=$(dig +short ${PRIVATE_HOSTNAME} | tail -n 1)
  juju_relation_id=$(cat ${HPCC_RELATION_ID})
  #relation-set  "netAddress=${IP_ADDRESS}"
  echo "$IP_ADDRESS" > $LOCAL_IP_FILE
}

##
## Get currently defined envgen parameters
##
function get_envgen_configuration()
{
  support_nodes=$(config-get supportnodes)
  thor_nodes=$(config-get thornodes)
  roxie_nodes=$(config-get roxienodes)
  slaves_per_node=$(config-get slavesPerNode)
}


##
##
##
function configure_cluster()
{

  number_of_nodes=$(cat $IP_FILE  | wc -l)
  if [ -z "$number_of_nodes" ] 
  then 
     return
  fi

  support_nodes=$(config-get supportnodes)
  compute_nodes=$(expr $number_of_nodes \- $support_nodes)
  if [ $compute_nodes -gt 0 ]
  then
     thor_ratio=$(config-get thor-ratio)
     roxie_ratio=$(config-get roxie-ratio)
     juju-log "thor_ratio: $thor_ratio, roxie_ratio: $roxie_ratio"
     thor_nodes=$(echo "scale=0; ($compute_nodes * ${thor_ratio})/1" | bc)
     roxie_nodes=$(echo "scale=0; ($compute_nodes * ${roxie_ratio})/1" | bc)

     #thor_nodes=$(config-get thornodes)
     #roxie_nodes=$(config-get roxienodes)
  else
     thor_nodes=0
     roxie_nodes=0
  fi
  juju-log "thornodes: $thor_nodes, roxienodes: $roxie_nodes"
  slaves_per_node=$(config-get slavesPerNode)

  #juju-log "Stop HPCC"
  # Following command return 3 even stop succeeds
  # It will be fixed in HPCC 5.0 release
  service hpcc-init stop > /dev/null 2>&1 || :

  juju-log "Run envgen ${ENV_GEN} -env ${CONFIG_DIR}/${ENV_XML_FILE} -ipfile ${IP_FILE} -thornodes ${thor_nodes} -slavesPerNode ${slaves_per_node} -roxienodes ${roxie_nodes} -supportnodes ${support_nodes}"
  "${ENV_GEN}" -env "${CONFIG_DIR}/${ENV_XML_FILE}" -ipfile "${IP_FILE}" -thornodes "${thor_nodes}" -slavesPerNode "${slaves_per_node}" -roxienodes "${roxie_nodes}" -supportnodes "${support_nodes}"
  [ $? -ne 0 ] && exit 1


  save_evngen_signature
  #save_eclwatch_url

}

##
## Save envgen signature
##
function save_evngen_signature()
{

   _signature="${support_nodes}-${roxie_nodes}-${thor_nodes}-${slaves_per_node}"
   juju-log "Save envgen signature: $_signature"
   echo "$_signature" > $SIGNATURE_FILE
}


##
## Save EclWatch URL to a file
##
function save_eclwatch_url()
{
  juju-log "Update Check ECLWatch URL"

  first_node=$(head -n 1 $IP_FILE | cut -d';' -f1)
  cat ${CONFIG_DIR}/${ENV_XML_FILE} | grep -q $first_node || exit 0

  eclwatch_port=$(cat ${CONFIG_DIR}/${ENV_XML_FILE} | \
  sed -n '
    /<EspBinding/,/>/ {
      s/port=\([[:digit:]]*\)/\1/p
    }
  ' | head -n 1 | cut -d '"' -f 2)

  eclwatch_ip=$(cat ${CONFIG_DIR}/${ENV_XML_FILE} | \
  sed -n '
    /<EspProcess/,/EspProcess>/ {
      s/netAddress=\([[:digit:]]*\)/\1/p
    }
  ' |  cut -d '"' -f 2)

  juju-log "set eclwatch-url http://${eclwatch_ip}:${eclwatch_port}"

  echo "http://${eclwatch_ip}:${eclwatch_port}" > ${ECLWATCH_URL_FILE}
}

##
## Check HPCC Status
##
function check_hpcc_status()
{
  stopped_components=$(service hpcc-init status | grep "stopped" | awk '{ print $1 }')
  [ -z "$stopped_components" ] && return 0
  juju-log "Failed to start HPCC processes. Check each log directory under /var/log/HPCCSysgtems for detail: ${stopped_components}."
  return 1
}

##
## Start HPCC and check its status
##
function start_and_check()
{

  service hpcc-init start
  #start_check_delay=$(config-get start-check-delay)
  #[ ${start_check_delay} -gt 0 ] && sleep ${start_check_delay}

  #check_hpcc_status || return $?
  
}

##
## Save relation id 
##
function save_relation_id()
{
   relation_id=$JUJU_RELATION_ID
   if [ ! -e $HPCC_RELATION_ID ]
   then
      echo $relation_id > $HPCC_RELATION_ID
   fi
}

##
## Update relation list ip file 
##
function update_relation_ip_list()
{

   juju-log "Update relation ip list"  

   if [ ! -e "${HPCC_RELATION_ID}" ] 
   then 
      return
   fi

   #just_jointed=$1

   juju_relation_id=$(cat ${HPCC_RELATION_ID})

   #UNIT_NAME_AND_IP_FILE=${JUJU_HPCC_DIR}/ip_file.tmp
   #LOCAL_IP=$(head -n 1  $LOCAL_IP_FILE)
   PRIVATE_HOSTNAME=$(unit-get private-address)
   LOCAL_IP=$(dig +short ${PRIVATE_HOSTNAME} | tail -n 1)

   echo "$JUJU_UNIT_NAME/${LOCAL_IP};" > ${UNIT_NAME_AND_IP_FILE}

   juju-log "RESET_SSH_KEYS: $RESET_SSH_KEYS"

   TOTAL_UNITS=1
   for UNIT in $(relation-list -r ${juju_relation_id})
   do
      PRIVATE_HOSTNAME=$(relation-get -r ${juju_relation_id} private-address $UNIT)
      UNIT_ADDRESS=$(dig +short ${PRIVATE_HOSTNAME} | tail -n 1)
      if [ -n "${UNIT_ADDRESS}" ]
      then
         TOTAL_UNITS=$(expr ${TOTAL_UNITS} \+ 1)
         echo "${UNIT}/${UNIT_ADDRESS};" >> "${UNIT_NAME_AND_IP_FILE}"
      fi
    done


    echo "File $UNIT_NAME_AND_IP_FILE " 
    cat $UNIT_NAME_AND_IP_FILE  
    cat $UNIT_NAME_AND_IP_FILE  | sort -n -t '/' -k 2,2 | cut -d '/' -f 3 > $IP_FILE
    echo "File $IP_FILE " 
    cat $IP_FILE  

    
    dali_ip=$(head -n 1 $IP_FILE) 
    new_dali=$(cat $UNIT_NAME_AND_IP_FILE | grep $dali_ip | cut -d '/' -f -2)
    cur_dali=$(relation-get -r $juju_relation_id dali $JUJU_UNIT_NAME)
    juju-log "new dali: $new_dali, cur dali: $cur_dali, ip: $dali_ip"
    if [ "$new_dali" != "$cur_dali" ] 
    then
        relation-set "dali=$new_dali"
    fi

    #state=$(relation-get -r $juju_relation_id state $JUJU_UNIT_NAME)
    #if [ "$JUJU_UNIT_NAME" = "$new_dali" ] && [ "$state" != "config" ]  
    #then
    #   relation-set -r $juju_relation_id "state=config"
    #fi

    return 0
}

##
## check cluster states
##   usage: check_cluster_states <states sperated by commo> <nagtive flag>
##   if nagive flag present (any value) will test excluding the states
##
function check_cluster_states()
{
   juju-log "Check cluster for state "$1", nagtive flag: $2"  
   states=$1
   nagtive_flag=$2
   juju_relation_id=$(cat ${HPCC_RELATION_ID})
   CHECK_STATE_RC=0
   for UNIT in $(relation-list -r ${juju_relation_id})
   do
      state=$(relation-get -r $juju_relation_id state $UNIT)
      juju-log "$UNIT is in state: $state"
      matched_string=$(echo ",${states}," | grep -i ",${state}," || :)
      juju-log "checking found string: $matched_string"
      if [ -z "$nagive_flag" ] && [ -z "${matched_string}" ]
      then
          CHECK_STATE_RC=1 
          break
      elif [ -n "$nagive_flag" ] && [ -n "${matched_string}" ]
      then
          CHECK_STATE_RC=1 
          break
      fi
   done
   juju-log "Leaving check_cluster_states"  

}
